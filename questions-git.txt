QUESTIONS:

1/- C'est quoi Git ?
Un service de versioning utilisant un serveur distant

2/- C'est quoi un repository git ?
Un dossier accessible à distance par plusieurs developpeurs pour travailler sur le meme projet

3/- Quelle commande faut t il écrire pour valider un ajout dans un repertoire git ?
git push origin <nom de la branche>

4/- Que fait la commande git push ?
Envoie les commits locaux sur le serveur distant

5/- quel est l'avantage de git par rapport à svn?

6/- c'est quoi la commande git stash ?


7/- c'est quoi la commande git branch ?
Permet de lister les branches du projet (ou d'en créer, d'en supprimer, etc ...)

8/- c'est quoi la commande git clone ?
Clone un repesitory distant sur la machine locale

9/-c'est quoi la commande git config ?
Permet de configurer le git

10/- c'est quoi la commande git init ?
Initialise un projet git sur un dossier local

11/- c'est quoi un conflit git ?
C'est quand on merge deux branches et que deux fichiers supposement identiques sont différents

12/- comment resoudre un conflit git ?
En modifiant le fichiers à l'origine du conflit

13/- c'est quoi la commande git remote ?
Envoie les fichiers locaux sur le serveur distant

14/- quelle est la différence entre git remote et git clone ?
Git remote: Envoie les fichiers locaux sur le serveur
Git clone: Envoie les fichiers distants en local

15/- c'est quoi la commande git status ?
Liste les fichiers locaux différents de ceux du serveur distant

16/- c'est quoi la commande git checkout ?
Permet de se déplacer entre les commits et les branches

17/- c'est quoi la commande git log ?
Permet de lister les commits d'une branche

18/- donner la suite de commandes à écrire pour envoyer un fichier sur un repository distant
git add *
git commit -m "Message"
git push origin <nom de la branche>
(On peut remplacer git add * et git commit -m "Message" par git commit -am "Message")

19/- c'est quoi github ?
Un site web permettant de gérer des repesitories Git

20/- citer 3 avantages d'utiliser git dans un projet
- Stockage à distance
- Plus pratique pour résoudre les conflits
- On peut travailler à plusieurs en meme temps

21/- c'est quoi le fichier .gitignore
Liste des fichiers à ignorer lors d'un commit ou d'un push

22/- quelles sont les étapes permettant de lier un projet git local à github?
git init (dans le fichier local)
git remote add origin <adresse github du repesitory>
git pull origin master
git add *
git commit -m "Message"
git push origin master

23/- quel est le role des branches sur git ?
Permettre aux développeurs de travailler sur un meme logiciel, mais sur des parties differentes
(Branche bug pour régler les bugs, front-end pour le front end, etc ...)

24/- c'est quoi un conflit git?
Voir question 11

25/- comment resoudre un conflit sur git ?
Voir question 12

LE BONCOIN:

UML
---
 Personne 1-----------* Annonce
 personneId             idAnnonce 
 nom                    intitule
 prenom                 detail
 login                  prix
 motDePasse
 dateNaissance   

 - créer un projet java : Ensup-Master1-tp2-Nom-Prenom
 - configurer le git/github avec un projet java et rajouter serviceshuios en collaborateur
 
 Metier:
--------
 Personne
 Annonce
 
 Iservice:
----------
  //Crud Personne
 public int creerPersonne(List<Personne> list, Personne personne)
 public Personne getPersonne(List<Personne> list,int idPersonne)
 public void deletePersonne(List<Personne> list,int idPersonne)
 public void updatePersonne(List<Personne> list,Personne p, String nom, String prenom, Date dateNaissance)
 public List<Personne> findAllPersonnes()
 public int getPersonneId(List<Personne> list,Personne p)
 public void affichePersonnes();
 public void afficheAnnoncesPersonne(Personne p)
 //Crud Annonce
 public int creerAnnonce(Personne personne, Annonce a)
 public Annonce getAnnonce(Personne personne,int idAnnonce)
 public void deleteAnnonce(Personne personne,int idAnnonce)
 public void updateAnnonce(Personne personne,Annonce a)
 public List<Annonce> findAllAnnonce(Personne personne)

ServiceImpl
-----------
implementation de l'interface
utiliser un tableau de Personne pour office de stockage des données
public static List<Personne> base = new ArrayList<Personne>();

Lanceur
-------
Tester chaque méthode

A la fin (17h00) au plus tard pusher son code sur github  